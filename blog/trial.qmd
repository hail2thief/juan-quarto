---
title: "What am I reading and watching?"
author: "Juan"
date: today
page-layout: full
format:
  html:
    code-fold: true
    code-summary: "Show code"
---



```{r}
#| label: setup
#| include: false

knitr::opts_chunk$set(
  fig.width = 8,
  fig.height = 10 * 0.618,
  fig.retina = 3,
  dev = "ragg_png",
  fig.align = "center",
  out.width = "90%",
  collapse = TRUE,
  echo = TRUE,
  cache.extra = 1234  # Change number to invalidate cache
)

options(
  digits = 4,
  width = 300,
  dplyr.summarise.inform = FALSE
)
```


## Introduction


A few years ago, I started logging everything I read and watched. There is something satisfying about keeping a record. I track what I'm reading on Goodreads (awful app), and what I'm watching on Letterboxd (very good app). I rate everything using each app's rating system: Goodreads is 1-5 stars, whole stars only; Letterboxd is 0-5 stars, half-stars are possible. 


The ratings data could be an interesting exercise on selection effects in data collection. Reading a book takes so long that I am not picking books at random and reading and rating them. I instead do a fair amount of research beforehand and pick things I imagine I will like. This has two consequences: 

1)  my ratings are pretty clumpy, made worse by the fact that Goodreads only allows whole-star ratings. I'm giving many different kinds of books similar ratings. 

2) my ratings are anchored by the minimum level of quality that I am willing to read. A book that I rate a 1 or 2 out of 5 is still way better (or at least in my opinion) than many books that I would not even consider reading. 


Movies, on the other hand, are much easier to get through, even bad ones. So we should probably see more variation in my ratings; helped too by the fact that Letterboxd allows for half-star ratings. 




### Cleaning the data


Neither service has an easy API at this point, so I'm manually exporting CSVs every so often to generate this page. 


::: {.callout-note}
Goodreads does not export the date I started reading a book, so I have to manually add that information. I have a separate CSV file with that info. 
:::



```{r}
#| warning: false
#| message: false
#| code-fold: true
# libraries
library(tidyverse)
library(hrbrthemes)
library(kableExtra)


# set seed
set.seed(1990)


# set theme
theme_set(theme_ipsum())


# load goodreads data
books = read_csv(here::here("personal_files/goodreads.csv")) |> 
  # clean names
  janitor::clean_names() |> 
  # subset columns
  select(title, author, author_l_f, my_rating, average_rating,
         number_of_pages, year_published, original_publication_year,
         date_read, date_added, my_review) |> 
  # drop if missing read dates
  drop_na(date_read) |> 
  # counter of movies watched
  mutate(counter = 1:n()) |> 
  # separate first name
  mutate(first_name = str_extract(author, "^[^\\s-]+")) |> 
  # replace original publication year with publication year if original missing
  mutate(original_publication_year = ifelse(is.na(original_publication_year), 
                                            year_published, 
                                            original_publication_year))



# load corrections for dates started
correct = read_csv(here::here("personal_files/goodreads_corrections.csv")) |> 
  select(title, date_added) |> 
  mutate(date_added = mdy(date_added))


# correct books
books = left_join(books, correct, by = "title") |> 
  mutate(
    date_added = coalesce(date_added.y, date_added.x)
  ) %>%
  select(-date_added.x, -date_added.y) 


# fix a few stragglers
books$date_added[str_detect(books$title, "Temptation")] <- "2022-02-16"
books$date_added[str_detect(books$title, "Full Sea")] <- "2022-06-16"


# calculate duration
books = books |> 
  # calculate duration
  mutate(duration = date_read - date_added,
         duration = as.numeric(duration))

# load letterboxd data
movies = read_csv(here::here("personal_files/reviews.csv")) |> 
   # clean names
  janitor::clean_names() |> 
  # set rewatch to "no" if NA
  replace_na(list(rewatch = "no")) |> 
  # count number of characters in review
  mutate(review_count = str_count(review, "\\S+") + 0) |> 
  # counter of movies watched
  mutate(counter = 1:n())


pal = MetBrewer::met.brewer(name = "Degas")
```


Goodreads does not provide any information about the authors. The best I can do is guess at their sex based on first names. The `{gender}` package can do this: 

```{r}
#| code-fold: true
library(gender)

auth_sex = gender(books$first_name) |> 
  select(first_name = name, sex = gender) |> 
  distinct()

books = left_join(books, auth_sex, by = "first_name")
```





## Books



### Books I've read in 2025


Here's the books I've read so far this year, my rating, and review:


```{r results='asis'}
# Clean and filter
last_books <- books %>%
  filter(date_read >= ymd("2025-01-01")) |> 
  mutate(`Date Read` = date_read) |> 
  filter(!is.na(`Date Read`)) |>
  arrange(desc(`Date Read`)) |> 
  #slice_head(n = 5) |> 
  mutate(
    formatted_date = format(`Date Read`, "%B %d, %Y"),  # Month Day, Year
    stars = map_chr(`my_rating`, ~ strrep("â˜…", .x))  # Star rating
  )


# Create list-style items with collapsible review
last_books %>%
  mutate(item = glue::glue(
    "<li>
      <strong>{title}</strong> by {author}<br>
      <em>My Rating:</em> {stars} <br>
      <em>Date Read:</em> {formatted_date}<br>
      <details><summary>My review</summary><p>{`my_review`}</p></details>
    </li>"
  )) %>%
  pull(item) %>%
  {cat("<ul>\n", paste(., collapse = "\n"), "\n</ul>")}
```



```{r, include=FALSE}
books |> 
  slice_max(order_by = date_read, n = 5) |> 
  mutate(date_read = format(date_read, "%B %d, %Y")) |> 
  select(title, author, rating = my_rating, 
         `date read` = date_read, 
         `number of pages` = number_of_pages) |> 
  kableExtra::kbl(caption = "Last five books read")
```
<br><br>


### Summary statistics


Here are some "big picture" summary statistics about my reading:

```{r}
#| echo: false


books |> 
  # if no original publication year, use year_published
  mutate(original_publication_year = ifelse(is.na(original_publication_year), 
                                            year_published, 
                                            original_publication_year)) |> 
  summarise(`First logged book` = format(min(date_added), "%b %Y"),
    `Total pages read` = scales::comma(sum(number_of_pages)), 
            `Average rating (out of 5)` = mean(my_rating),
            `Median publication year` = median(original_publication_year), 
            `Male authors (%)` = prop.table(table(books$sex))["male"]*100) |> 
  kableExtra::kbl(caption = "Summary statistics", digits = 2)
```


Here's the distribution of book ratings:

```{r}
books |> 
  count(my_rating) |> 
  mutate(percentage = n / sum(n)) |> 
  ggplot(aes(x = factor(my_rating), y = percentage)) + 
  geom_col(color = "white", fill = pal[7], alpha = .9) + 
  scale_y_continuous(limits = c(0, 1), labels = scales::percent) +
  labs(x = "My rating (1-5)", y = "Percent of books") + 
  theme(panel.grid.major = element_blank())
```


### Other descriptives


Here's the correlation between my rating, the average rating on Goodreads, how long it took me to read the book, and when the book was originally published:

```{r}
#| code-fold: true

books |> 
  select(duration, my_rating, average_rating, original_publication_year) |> 
  cor() |> 
  round(2) |> 
  as_tibble(rownames = "variable") |> 
  kable(format = "html", digits = 2) %>%
  kable_styling(full_width = F, bootstrap_options = c("striped", "hover"))
```











<br><br>





Here are the number of pages I've read over time:


```{r}
#| code-fold: true

# Randomly select five books to label
sum_pages = books |> 
  arrange(date_read) |> 
  select(title, date_read, number_of_pages) |> 
  rownames_to_column() |> 
  mutate(pages = cumsum(number_of_pages),
         books = rowname)


highlighted_points = sum_pages |> 
  filter(books %in% round(seq(1, n(), length.out = 5)))


ggplot(sum_pages, aes(x = date_read, y = pages)) + 
  geom_area(fill = pal[7], alpha = .8, color = "white") + 
  labs(x = NULL, y = "Cummulative pages read") + 
  scale_y_comma() + 
  geom_point(data = highlighted_points, aes(x = date_read, y = pages), 
             color = pal[7], size = 3) +
  ggrepel::geom_label_repel(data = highlighted_points, 
                            aes(x = date_read, y = pages, 
                                            label = title), 
                            size = 3,
             nudge_x = -100, fill = "white", color = pal[7],
             nudge_y = 30) + 
  scale_y_continuous(expand = expansion(mult = c(0, 0.1)))
  
```




What are the top five shortest and longest books I've read?


```{r}
#| code-fold: true


# slice to top five shortest and longest in page length
top_5 = books |> 
  slice_max(order_by = number_of_pages, n = 5, with_ties = FALSE) |> 
  mutate(label = "5 longest")

bot_5 = books |> 
  slice_min(order_by = number_of_pages, n = 5, with_ties = FALSE) |> 
  mutate(label = "5 shortest")

# combine and plot
bind_rows(top_5, bot_5) |> 
  select(title, author, number_of_pages) |> 
  kable() |> 
  group_rows("Longest Books", 1, 5) %>%
  group_rows("Shortest Books", 6, 10)
```


<br><br>

How do my ratings compare versus the averages reported by Goodreads? 


```{r}
#| code-fold: true

books |> 
  select(title, my_rating, average_rating) |> 
  mutate(diff = my_rating - average_rating) |>  
  ggplot(aes(y = reorder(title, diff), x = diff,
             fill = diff > 0)) +
  geom_col(alpha = 0.8) + 
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank()) + 
  labs(title = "Difference between my ratings and the\n average Goodreads user", 
       x = "My rating - average Goodreads user", 
       fill = "Books I liked:", y = NULL) + 
  scale_fill_manual(values = pal[c(1, 7)], 
                    labels = c("...less than the Goodreads average",
                               "...more than the Goodreads average")) +
  theme(
    #panel.background = element_blank(),
    #plot.background = element_blank(),
    panel.grid.major = element_blank(),
    #panel.grid.minor = element_blank(),
    axis.line = element_blank(),
    legend.position = "top"
  )
```


How long am I spending on individual books? Caveat: the dates added / read are approximations in some cases. 


```{r}
#| code-fold: true

# Reorder titles so longer reads appear lower in plot
books_bell = books %>%
  mutate(title = str_remove(title, ":.*$")) |> 
  mutate(title = fct_reorder(title, date_added)) 

# hilite top three longest
hilite = books_bell |> 
  mutate(duration = date_read - date_added) |> 
  slice_max(order_by = duration, n = 3) |> 
  mutate(title = str_remove(title, ":.*$")) |> 
  mutate(title = fct_reorder(title, date_added))

# Plot
ggplot(filter(books_bell, date_added >= ymd("2023-01-01")), aes(y = title)) +
  geom_segment(aes(x = date_added, xend = date_read, yend = title), 
               color = "gray70", size = 2) +
  geom_point(aes(x = date_added), color = pal[1], size = 4) +
  geom_point(aes(x = date_read), color = pal[7], size = 4) +
  labs(
    title = "Time spent on each book",
    x = "Date",
    y = NULL,
  ) +
  theme_minimal() + 
  scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + 
  theme(axis.text.y = element_blank(),
        panel.grid.minor = element_blank())
  
```


## Movies


Here are the last five movies I've watched:


```{r}
#| code-fold: true

movies |> 
  slice_max(order_by = watched_date, n = 5) |> 
  mutate(watched_date = format(watched_date, "%B %d, %Y")) |> 
  select(name, year, rating, watched_date) |> 
  kableExtra::kbl(caption = "Last five movies watched")
```



### Summary statistics


Overall stats:


```{r}
#| code-fold: true

movies |> 
  summarise(`First review` = format(min(watched_date), "%b %d %Y"),
            `Number of movies` = n(),
            `Average rating` = mean(rating), 
            `Median year movie came out` = median(year),
            `Average length of review (num. of words)` = mean(review_count)) |> 
  kable()
```

<br><br>

Distribution of movie ratings:


```{r}
#| code-fold: true

movies |> 
  count(rating) |> 
  mutate(percentage = n / sum(n)) |> 
  ggplot(aes(x = rating, y = percentage)) +
  geom_col(color = "white", fill = pal[7], alpha = .9) + 
  scale_y_continuous(limits = c(0, 1), labels = scales::percent) +
  labs(x = "My rating (1-5)", y = "Percent of movies") + 
  theme(panel.grid.major = element_blank())
```


### Descriptives



Movies over time:


```{r}
#| code-fold: true


# Randomly select five movies to label
highlighted_points = movies |> 
  filter(counter %in% round(seq(1, n(), length.out = 5)))

movies |> 
  ggplot(aes(x = watched_date, y = counter)) + 
  geom_area(fill = pal[7], alpha = .8, color = "white") + 
  geom_point(data = highlighted_points, aes(x = watched_date, y = counter), 
             color = pal[7], size = 3) +
  ggrepel::geom_label_repel(data = highlighted_points, aes(x = watched_date, y = counter, 
                                            label = name), 
             nudge_x = -100, fill = "white", color = pal[7],
             nudge_y = 20) +
  labs(x = "Date watched", title = "Movies watched so far",
       y = "Number of movies watched") + 
  scale_x_date(expand = expansion(mult = c(0.05, 0.05)))
```




Here's the correlation between the year a movie came out, my rating, and the word count for my review: 


```{r}
#| code-fold: true

movies |> 
  select(year, rating, review_count) |> 
  cor() |> 
  as_tibble(rownames = "variable") |> 
  kable(format = "html", digits = 2) %>%
  kable_styling(full_width = F, bootstrap_options = c("striped", "hover"))
```

